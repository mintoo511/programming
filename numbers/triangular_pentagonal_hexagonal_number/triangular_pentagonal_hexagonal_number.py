#
# Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

# Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
# Pentagonal    Pn=n(3n1)/2	 	1, 5, 12, 22, 35, ...
# Hexagonal	 	Hn=n(2n1)	 	1, 6, 15, 28, 45, ...

# It can be verified that T285 = P165 = H143 = 40755.

# Find the next triangle number that is also pentagonal and hexagonal.
#
# Performance : 4,419ms
# Answer : 1,533,776,805
#

# Returna  list/set/dict of n hexagonal numbers from the start value, n not inclusive
# h(n) = [n(2n-1)], diff = 3n + 1
def hexagonal_n(start, n, type='set'):
    numbers = []
    i = start*(2*start-1)
    inc = 4*start + 1
    numbers.append(i)
    count = 1

    while count < n :
        i += inc
        inc += 4
        count += 1
        numbers.append(i)

    if type == 'set':
        return set(numbers)

    elif type == 'list':
        return numbers

    elif type == 'dict':
        ans = {}
        for i in range(start, n):
            ans[i] = numbers[i]
        return ans

    else:
        raise Exception("Incorrect Type!")

# Returna  list/set of n pentagonal numbers from the start value, n not inclusive
# p(n) = 1/2[n(3n-1)], diff = 3n + 1
def pentagonal_n(start, n, type='set'):
    numbers = []
    i = (start*(3*start-1))/2
    inc = 3*start + 1
    numbers.append(i)
    count = 1

    while count < n :
        i += inc
        inc += 3
        count += 1
        numbers.append(i)

    if type == 'set':
        return set(numbers)

    elif type == 'list':
        return numbers

    elif type == 'dict':
        ans = {}
        for i in range(start, n):
            ans[i] = numbers[i]
        return ans

    else:
        raise Exception("Incorrect Type!")

# Returns a list/set of n triangle numbers from the start value, n not inclusive
# t(n) = 1/2[n(n+1)]
# Performance : 135ms (start = 0, n = 10,000, type='list')
def triangular_n(start, n, type='set'):
    numbers = []
    i = (start*(start+1))/2
    inc = start + 1
    count = 1
    numbers.append(i)
    n = n + inc

    while inc < n :
        i += inc
        inc += 1
        numbers.append(i)

    if type == 'set':
        return set(numbers)

    elif type == 'list':
        return numbers

    else:
        raise Exception("Incorrect Type!")


def p45():
    n = 100000

    t = triangular_n(1, n)
    p = pentagonal_n(1, n)
    h = hexagonal_n(1, n)


    return set.intersection(t, p, h)

print p45()
